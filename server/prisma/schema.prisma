generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CollectionItem {
  id                 Int              @id @default(autoincrement())
  collectionPeriodId Int              @map("collection_period_id")
  roomNumber         String           @map("room_number") @db.VarChar(20)
  revenueItemId      Int              @map("revenue_item_id")
  quantity           Decimal          @db.Decimal(12, 2)
  quantityUnit       String           @map("quantity_unit") @db.VarChar(20)
  unitPrice          Decimal          @map("unit_price") @db.Decimal(12, 2)
  totalAmount        Decimal          @map("total_amount") @db.Decimal(12, 2)
  note               String?          @db.VarChar(255)
  collectionPeriods  CollectionPeriod @relation(fields: [collectionPeriodId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "collection_items_ibfk_1")
  rooms              Room             @relation(fields: [roomNumber], references: [room_number], onDelete: NoAction, onUpdate: NoAction, map: "collection_items_ibfk_2")
  revenueItems       RevenueItem      @relation(fields: [revenueItemId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "collection_items_ibfk_3")

  @@index([collectionPeriodId], map: "fk_collection_period_id")
  @@index([revenueItemId], map: "fk_revenue_item_id")
  @@index([roomNumber], map: "fk_room_number")
  @@map("collection_items")
}

model CollectionPeriod {
  id              Int                   @id @default(autoincrement())
  name            String                @db.VarChar(100)
  startDate       DateTime              @map("start_date") @db.Date
  endDate         DateTime              @map("end_date") @db.Date
  type            CollectionPeriodsType
  code            String                @unique(map: "unique_code") @db.VarChar(50)
  collectionItems CollectionItem[]
  payments        Payment[]

  @@map("collection_periods")
}

model Payment {
  id                 Int              @id @default(autoincrement())
  roomNumber         String           @map("room_number") @db.VarChar(20)
  collectionPeriodId Int              @map("collection_period_id")
  paidAmount         Decimal          @map("paid_amount") @db.Decimal(12, 2)
  paymentDate        DateTime         @map("payment_date") @db.Date
  note               String?          @db.VarChar(255)
  debtAmount         Decimal?         @default(0.00) @map("debt_amount") @db.Decimal(12, 2)
  excessAmount       Decimal?         @default(0.00) @map("excess_amount") @db.Decimal(12, 2)
  rooms              Room             @relation(fields: [roomNumber], references: [room_number], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_2")
  collectionPeriods  CollectionPeriod @relation(fields: [collectionPeriodId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "payments_ibfk_3")

  @@index([collectionPeriodId], map: "fk_collection_period_id")
  @@index([roomNumber], map: "fk_room_number")
  @@map("payments")
}

model Resident {
  id                  Int                          @id @default(autoincrement())
  fullName            String                       @map("full_name") @db.VarChar(100)
  dateOfBirth         DateTime                     @map("date_of_birth") @db.Date
  placeOfBirth        String                       @map("place_of_birth") @db.VarChar(100)
  ethnicity           String                       @db.VarChar(50)
  occupation          String?                      @db.VarChar(100)
  hometown            String                       @db.VarChar(100)
  idCardNumber        String?                      @unique(map: "unique_id_card_number") @map("id_card_number") @db.VarChar(20)
  residenceStatus     ResidentsResidenceStatus     @map("residence_status")
  phone               String?                      @db.VarChar(20)
  gender              ResidentsGender
  relationshipToOwner ResidentsRelationshipToOwner @map("relationship_to_owner")
  roomNumber          String                       @map("room_number") @db.VarChar(20)
  status              ResidentsStatus
  rooms               Room                         @relation(fields: [roomNumber], references: [room_number], onDelete: NoAction, onUpdate: NoAction, map: "residents_ibfk_1")

  @@index([roomNumber], map: "fk_room_number")
  @@map("residents")
}

model RevenueItem {
  id              Int                  @id @default(autoincrement())
  name            String               @db.VarChar(100)
  unitPrice       Decimal              @map("unit_price") @db.Decimal(12, 2)
  description     String?              @db.Text
  category        RevenueItemsCategory
  status          RevenueItemsStatus
  code            String               @unique(map: "unique_code") @db.VarChar(50)
  quantityUnit    String?              @map("quantity_unit") @db.VarChar(50)
  collectionItems CollectionItem[]

  @@map("revenue_items")
}

model Room {
  room_number     String           @id @db.VarChar(20)
  floor           Int
  area            Float            @db.Float
  status          RoomsStatus
  collectionItems CollectionItem[]
  payments        Payment[]
  residents       Resident[]
  vehicles        Vehicle[]

  @@map("rooms")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique(map: "unique_email") @db.VarChar(100)
  username String    @db.VarChar(100)
  password String    @db.VarChar(100)
  role     UsersRole @default(accountant)
  avatar   String?   @db.VarChar(100)

  @@map("users")
}

model Vehicle {
  id               Int          @id @default(autoincrement())
  roomNumber       String       @map("room_number") @db.VarChar(20)
  plateNumber      String       @unique(map: "unique_plate_number") @map("plate_number") @db.VarChar(20)
  type             VehiclesType
  brand            String       @db.VarChar(50)
  color            String       @db.VarChar(30)
  registrationDate DateTime     @map("registration_date") @db.Date
  isActive         Boolean      @map("is_active")
  note             String?      @db.VarChar(255)
  rooms            Room         @relation(fields: [roomNumber], references: [room_number], onDelete: NoAction, onUpdate: NoAction, map: "vehicles_ibfk_1")

  @@index([roomNumber], map: "fk_room_number")
  @@map("vehicles")
}

enum VehiclesType {
  motorbike
  car
}

enum RoomsStatus {
  available
  occupied
}

enum RevenueItemsCategory {
  mandatory
  voluntary
}

enum UsersRole {
  accountant
  admin
}

enum CollectionPeriodsType {
  monthly
  quarterly
  yearly
}

enum RevenueItemsStatus {
  active
  inactive
}

enum ResidentsResidenceStatus {
  permanent
  temporary
}

enum ResidentsGender {
  male
  female
  other
}

enum ResidentsRelationshipToOwner {
  owner
  spouse
  parent
  child
  other
}

enum ResidentsStatus {
  living
  moved_out
}
